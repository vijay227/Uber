package com.src.uber.trip;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import com.src.uber.Driver;
import com.src.uber.DriverMatchingStrategy;
import com.src.uber.Location;
import com.src.uber.PricingStrategy;
import com.src.uber.StrategyMgr;
import com.src.uber.driver.DriverMgr;
import com.src.uber.rider.Rider;
import com.src.uber.rider.RiderMgr;

public class TripMgr {
    private static TripMgr tripMgrInstance;
    private static final Lock mtx = new ReentrantLock();
    private RiderMgr riderMgr;
    private DriverMgr driverMgr;
    private Map<Integer, TripMetaData> tripsMetaDataInfo = new HashMap<>();
    private Map<Integer, Trip> tripsInfo = new HashMap<>();

    private TripMgr() {
        riderMgr = RiderMgr.getRiderMgr();
        driverMgr = DriverMgr.getDriverMgr();
    }

    public static TripMgr getTripMgr() {
        if (tripMgrInstance == null) {
            mtx.lock();
            try {
                if (tripMgrInstance == null) {
                    tripMgrInstance = new TripMgr();
                }
            } finally {
                mtx.unlock();
            }
        }
        return tripMgrInstance;
    }

    public void createTrip(Rider pRider, Location pSrcLoc, Location pDstLoc) {
        TripMetaData metaData = new TripMetaData(pSrcLoc, pDstLoc, pRider.getRating());
        StrategyMgr strategyMgr = StrategyMgr.getStrategyMgr();
        PricingStrategy pricingStrategy = strategyMgr.determinePricingStrategy(metaData);
        DriverMatchingStrategy driverMatchingStrategy = strategyMgr.determineMatchingStrategy(metaData);

        Driver driver = driverMatchingStrategy.matchDriver(metaData);
        double tripPrice = pricingStrategy.calculatePrice(metaData);

        Trip trip = new Trip(pRider, driver, pSrcLoc, pDstLoc, tripPrice, pricingStrategy, driverMatchingStrategy);
        int tripId = trip.getTripId();
        tripsInfo.put(tripId, trip);
        tripsMetaDataInfo.put(tripId, metaData);
    }

    public Map<Integer, Trip> getTripsMap() {
        return tripsInfo;
    }
}
